package server

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/kolide/osquery-golang/gen/osquery"
	"github.com/pkg/errors"
)

// TablePlugin is the minimum interface required to implement an osquery table
// as a plugin. Any value that implements this interface can be passed to
// NewTablePlugin to satisfy the OsqueryPlugin interface.
type TablePlugin interface {
	// TableName returns the name of the table the plugin implements.
	TableName() string

	// Columns returns the column definition of the table.
	Columns() []ColumnDefinition

	// Generate returns the rows generated by the table. The ctx argument
	// should be checked for cancellation if the generation performs a
	// substantial amount of work. The queryContext argument provides the
	// deserialized JSON query context from osquery.
	Generate(ctx context.Context, queryContext interface{}) ([]map[string]string, error)
}

// NewTablePlugin takes a value that implements TablePlugin and wraps it with
// the appropriate methods to satisfy the OsqueryPlugin interface. Use this to
// easily create plugins implementing osquery tables.
func NewTablePlugin(plugin TablePlugin) *tablePluginImpl {
	return &tablePluginImpl{plugin}
}

type tablePluginImpl struct {
	plugin TablePlugin
}

// Ensure tablePluginImpl implements the OsqueryPlugin interface.
var _ OsqueryPlugin = (*tablePluginImpl)(nil)

func (t *tablePluginImpl) Name() string {
	return t.plugin.TableName()
}

func (t *tablePluginImpl) RegistryName() string {
	return "table"
}

func (t *tablePluginImpl) Routes() osquery.ExtensionPluginResponse {
	routes := []map[string]string{}
	for _, col := range t.plugin.Columns() {
		routes = append(routes, map[string]string{
			"id":   "column",
			"name": col.Name,
			"type": string(col.Type),
			"op":   "0",
		})
	}
	return routes
}

func (t *tablePluginImpl) Ping() osquery.ExtensionStatus {
	return StatusOK
}

func (t *tablePluginImpl) Call(ctx context.Context, request osquery.ExtensionPluginRequest) osquery.ExtensionResponse {
	switch request["action"] {
	case "generate":
		queryContext, err := parseQueryContext(request["context"])
		if err != nil {
			return osquery.ExtensionResponse{
				Status: &osquery.ExtensionStatus{
					Code:    1,
					Message: "error parsing context JSON: " + err.Error(),
				},
			}
		}

		rows, err := t.plugin.Generate(ctx, queryContext)
		if err != nil {
			return osquery.ExtensionResponse{
				Status: &osquery.ExtensionStatus{
					Code:    1,
					Message: "error generating table: " + err.Error(),
				},
			}
		}

		return osquery.ExtensionResponse{
			Status:   &StatusOK,
			Response: rows,
		}

	case "columns":
		return osquery.ExtensionResponse{
			Status:   &StatusOK,
			Response: t.Routes(),
		}

	default:
		return osquery.ExtensionResponse{
			Status: &osquery.ExtensionStatus{
				Code:    1,
				Message: "unknown action: " + request["action"],
			},
		}
	}

}

func (t *tablePluginImpl) Shutdown() {}

// ColumnDefinition defines the relevant information for a column in a table
// plugin. Both values are mandatory. Prefer using the *Column helpers to
// create ColumnDefinition structs.
type ColumnDefinition struct {
	Name string
	Type ColumnType
}

// TextColumn is a helper for defining columns containing strings.
func TextColumn(name string) ColumnDefinition {
	return ColumnDefinition{
		Name: name,
		Type: ColumnTypeText,
	}
}

// IntegerColumn is a helper for defining columns containing integers.
func IntegerColumn(name string) ColumnDefinition {
	return ColumnDefinition{
		Name: name,
		Type: ColumnTypeInteger,
	}
}

// BigIntColumn is a helper for defining columns containing big integers.
func BigIntColumn(name string) ColumnDefinition {
	return ColumnDefinition{
		Name: name,
		Type: ColumnTypeBigInt,
	}
}

// DoubleColumn is a helper for defining columns containing floating point
// values.
func DoubleColumn(name string) ColumnDefinition {
	return ColumnDefinition{
		Name: name,
		Type: ColumnTypeDouble,
	}
}

// ColumnType is a strongly typed representation of the data type string for a
// column definition. The named constants should be used.
type ColumnType string

// The following column types are defined in osquery tables.h.
const (
	ColumnTypeText    ColumnType = "TEXT"
	ColumnTypeInteger            = "INTEGER"
	ColumnTypeBigInt             = "BIGINT"
	ColumnTypeDouble             = "DOUBLE"
)

type QueryContext struct {
	Constraints map[string]ConstraintList
}

type ConstraintList struct {
	Affinity    ColumnType
	Constraints []Constraint
}

type Constraint struct {
	Operator   Operator
	Expression string
}

type Operator int

const (
	OperatorEquals              Operator = 2
	OperatorGreaterThan                  = 4
	OperatorLessThanOrEquals             = 8
	OperatorLessThan                     = 16
	OperatorGreaterThanOrEquals          = 32
	OperatorMatch                        = 64
	OperatorLike                         = 65
	OperatorGlob                         = 66
	OperatorRegexp                       = 67
	OperatorUnique                       = 1
)

type queryContextJSON struct {
	Constraints []constraintListJSON `json:"constraints"`
}

type constraintListJSON struct {
	Name     string          `json:"name"`
	Affinity string          `json:"affinity"`
	List     json.RawMessage `json:"list"`
}

func parseQueryContext(ctxJSON string) (*QueryContext, error) {
	var parsed queryContextJSON

	err := json.Unmarshal([]byte(ctxJSON), &parsed)
	if err != nil {
		return nil, errors.Wrap(err, "unmarshaling context JSON")
	}

	ctx := QueryContext{map[string]ConstraintList{}}
	for _, cList := range parsed.Constraints {
		constraints, err := parseConstraintList(cList.List)
		if err != nil {
			return nil, err
		}

		ctx.Constraints[cList.Name] = ConstraintList{
			Affinity:    ColumnType(cList.Affinity),
			Constraints: constraints,
		}
	}

	return &ctx, nil
}

func parseConstraintList(constraints json.RawMessage) ([]Constraint, error) {
	var str string
	err := json.Unmarshal(constraints, &str)
	if err == nil {
		// string indicates empty list
		return []Constraint{}, nil
	}

	var cList []map[string]string
	err = json.Unmarshal(constraints, &cList)
	if err != nil {
		// cannot do anything with other types
		return nil, errors.Errorf("unexpected context list: %s", string(constraints))
	}

	cl := []Constraint{}
	for _, c := range cList {
		opInt, err := strconv.Atoi(c["op"])
		if err != nil {
			return nil, errors.Errorf("parsing operator int: %s", c["op"])
		}

		cl = append(cl, Constraint{
			Operator:   Operator(opInt),
			Expression: c["expr"],
		})
	}
	return cl, nil
}
